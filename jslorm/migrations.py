import os
import importlib
import inspect
from typing import Dict, List, Type
from .models import BaseModel
from .driver import DatabaseDriver

class ModelRegistry:
    _models: Dict[str, Type[BaseModel]] = {}
    _app_path: str = None

    @classmethod
    def register_model(cls, model_class: Type[BaseModel]):
        table_name = model_class.get_table_name()
        cls._models[table_name] = model_class

    @classmethod
    def get_models(cls) -> Dict[str, Type[BaseModel]]:
        return cls._models

    @classmethod
    def discover_models(cls, app_path: str = None):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –º–æ–¥–µ–ª–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ"""
        if app_path:
            cls._app_path = app_path
        
        if not cls._app_path:
            cls._app_path = os.getcwd()
        
        # –°–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ .py —Ñ–∞–π–ª—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ
        for root, dirs, files in os.walk(cls._app_path):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞–ø–∫–∏
            dirs[:] = [d for d in dirs if not d.startswith('.') and d not in ['__pycache__', 'venv', 'env']]
            
            for file in files:
                if file.endswith('.py') and not file.startswith('__'):
                    file_path = os.path.join(root, file)
                    cls._scan_file_for_models(file_path)

    @classmethod
    def _scan_file_for_models(cls, file_path: str):
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–µ–ª–µ–π"""
        try:
            import sys
            import importlib.util
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –º–æ–¥—É–ª—è
            module_name = os.path.splitext(os.path.basename(file_path))[0]
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
            spec = importlib.util.spec_from_file_location(module_name, file_path)
            if spec and spec.loader:
                module = importlib.util.module_from_spec(spec)
                sys.modules[module_name] = module
                spec.loader.exec_module(module)
                
                # –ò—â–µ–º –∫–ª–∞—Å—Å—ã-–Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∏ BaseModel
                for name, obj in inspect.getmembers(module, inspect.isclass):
                    if (obj.__module__ == module_name and 
                        issubclass(obj, BaseModel) and 
                        obj != BaseModel and 
                        hasattr(obj, '__table_name__') and 
                        obj.__table_name__):
                        cls.register_model(obj)
                        print(f"‚úÖ Found model: {obj.__name__} -> {obj.__table_name__}")
                        
        except Exception as e:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞
            print(f"‚ö†Ô∏è  Error scanning {file_path}: {e}")
            pass

class MigrationEngine:
    def __init__(self, db_driver: DatabaseDriver):
        self.db = db_driver
        self.migration_table = "_jslorm_migrations"

    async def init_migration_table(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π"""
        await self.db.create_table(self.migration_table, {
            "id": "int",
            "version": "str", 
            "applied_at": "str",
            "models_hash": "str"
        })

    async def get_current_version(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –º–∏–≥—Ä–∞—Ü–∏–π"""
        try:
            record = await self.db.select_one(self.migration_table, {})
            return record.get("version", "0") if record else "0"
        except:
            return "0"

    async def get_models_hash(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ö—ç—à –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        import hashlib
        models = ModelRegistry.get_models()
        models_data = {}
        
        for table_name, model_class in models.items():
            models_data[table_name] = {
                "schema": model_class.get_schema(),
                "indexes": model_class.get_indexes(),
                "unique_fields": model_class.get_unique_fields()
            }
        
        models_str = str(sorted(models_data.items()))
        return hashlib.md5(models_str.encode()).hexdigest()

    async def detect_changes(self) -> Dict[str, any]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –º–æ–¥–µ–ª—è—Ö"""
        current_hash = await self.get_models_hash()
        
        try:
            last_migration = await self.db.select_one(self.migration_table, {})
            last_hash = last_migration.get("models_hash", "") if last_migration else ""
        except:
            last_hash = ""
        
        if current_hash != last_hash:
            return {
                "has_changes": True,
                "current_hash": current_hash,
                "last_hash": last_hash,
                "models": ModelRegistry.get_models()
            }
        
        return {"has_changes": False}

    async def create_migration(self, version: str = None):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –º–∏–≥—Ä–∞—Ü–∏—é"""
        if not version:
            from datetime import datetime
            version = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        changes = await self.detect_changes()
        if not changes["has_changes"]:
            print("No changes detected")
            return
        
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –º–æ–¥–µ–ª–µ–π
        models = ModelRegistry.get_models()
        for table_name, model_class in models.items():
            schema = model_class.get_schema()
            await self.db.create_table(table_name, schema)
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
            for field in model_class.get_indexes():
                self.db.index_manager.create_index(table_name, field)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
        await self.init_migration_table()
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –º–∏–≥—Ä–∞—Ü–∏–π
        await self.db.delete(self.migration_table, {})
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        await self.db.insert(self.migration_table, {
            "version": version,
            "applied_at": datetime.now().isoformat(),
            "models_hash": changes["current_hash"]
        })
        
        print(f"‚úÖ Migration {version} applied successfully")
        print(f"üìä Created {len(models)} tables")

    async def upgrade(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ (—Å–æ–∑–¥–∞–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—ã)"""
        await self.create_migration()

    async def show_status(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π"""
        changes = await self.detect_changes()
        current_version = await self.get_current_version()
        models = ModelRegistry.get_models()
        
        print(f"üìã Migration Status:")
        print(f"Current version: {current_version}")
        print(f"Models found: {len(models)}")
        print(f"Changes detected: {'Yes' if changes['has_changes'] else 'No'}")
        
        if models:
            print(f"\nüìä Registered Models:")
            for table_name, model_class in models.items():
                schema = model_class.get_schema()
                print(f"  ‚Ä¢ {table_name}: {len(schema)} fields")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
def auto_register_model(cls):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏"""
    ModelRegistry.register_model(cls)
    return cls